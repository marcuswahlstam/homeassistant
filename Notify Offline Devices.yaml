blueprint:
  name: Notify if device is offline
  description: Regularly check if devices are offline
  domain: automation
  input:
    time:
      name: Time to test on
      description: Test is run at configured time
      default: '10:00:00'
      selector:
        time: {}
    day:
      name: Weekday to test on
      description: 'Test is run at configured time either everyday (0) or on a given
        weekday (1: Monday ... 7: Sunday)'
      default: 0
      selector:
        number:
          min: 0.0
          max: 7.0
          mode: slider
          step: 1.0
    exclude:
      name: Excluded Entities
      description: Entities to exclude from detection. Only entities are supported, devices must be expanded!
      default: {entity_id: []}
      selector:
        target:
          entity:
            device_class:
    actions:
      name: Actions
      description: Notifications or similar to be run. {{devices}} is replaced with
        the names of sensors being low on battery.
      selector:
        action: {}
  source_url: https://gist.github.com/sbyx/1f6f434f0903b872b84c4302637d0890
variables:
  day: !input 'day'
  threshold: !input 'threshold'
  exclude: !input 'exclude'
  devices: >-
    {% set result = namespace(devices=[]) %}
    {% for state in hass.states.all() %}
      {% if not state.entity_id in exclude.entity_id %}
        {% if state.state == "unavailable" %}
          {% set result.devices = result.devices + state.name %}
	{% endif %}
      {% endif %}
    {% endfor %}
    {{result.devices|join(', ')}}
trigger:
- platform: time
  at: !input 'time'
condition:
- '{{ devices != '''' and (day | int == 0 or day | int == now().isoweekday()) }}'
action:
- choose: []
  default: !input 'actions'
mode: single
